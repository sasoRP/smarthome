val Functions$Function3<SwitchItem, SwitchItem, SwitchItem, Boolean> shouldLightTurnOn =  [SwitchItem lightBulb, SwitchItem switchLightOnMotion, SwitchItem switchMotionState |	
	
	var canLightTurnOn = (lightBulb.state == OFF) &&
						 (switchLightOnMotion.state == ON) &&
						 (switchMotionState.state == ON);

	var isAfterSunSet = (SunLight.state == OFF);
	
	logDebug("motion.rules", "canLightTurnOn: " + canLightTurnOn + ".");
	
	var result = canLightTurnOn && isAfterSunSet;
							 
    if (result)
	{
		logDebug("motion.rules", "light should turn ON");
	}
	else
	{
		logDebug("motion.rules", "light should NOT turn ON");
	}
	
	return result;
]


val Functions$Function3<SwitchItem, SwitchItem, SwitchItem, Boolean> shouldLightTurnOff =  [SwitchItem lightBulb, SwitchItem switchLightOnMotion, SwitchItem switchMotionState |
							 
	var shouldLightTurnOff = (switchLightOnMotion.state == ON) &&
							 (lightBulb.state == ON) &&
							 (switchMotionState.state == OFF);
	
	if (shouldLightTurnOff)
	{
		logDebug("motion.rules", "light should turn OFF");
	}
	else
	{
		logDebug("motion.rules", "light should NOT turn OFF");
	}
	
	return shouldLightTurnOff;
]


rule "Motion Sensor - Sala de Jantar"
when
    Item motion_sensor_sala_jantar_motion changed or
	Item motion_sensor_sala_jantar_illumination changed
then
	logInfo("motion.rules", "movimento/iluminação - sala de jantar.");

	var turnLightOn = false;
	
	if (motion_sensor_sala_jantar_illumination.state > 40) {
		turnLightOn = false;
		logInfo("motion.rules", "Sala de Jantar illumination needs no lights.");
	} else {
		turnLightOn = shouldLightTurnOn.apply(hue_sala_jantar_switch, EnableLightOnMotion_SalaDeJantar, motion_sensor_sala_jantar_motion);
	}
	
	if (turnLightOn)
	{
		logDebug("motion.rules", "sending ON command to Hue - Sala de Jantar");
		sendCommand(hue_sala_jantar_switch, ON);
		
		if ((hue_sala_jantar_brightness.state as DecimalType) < 100)
		{
			hue_sala_jantar_brightness.sendCommand(100);
		}
	} else {
		logDebug("motion.rules", "Sala de Jantar light will NOT turn ON.");
	}

	var turnLightOff = shouldLightTurnOff.apply(hue_sala_jantar_switch, EnableLightOnMotion_SalaDeJantar, motion_sensor_sala_jantar_motion);
	
	if (turnLightOff)
	{
		logDebug("motion.rules", "sending OFF command to Hue - Sala de Jantar");
		sendCommand(hue_sala_jantar_switch, OFF);
	}
end


rule "Motion Sensor - Quarto do Pedro"
when
    Item motion_sensor_quarto_pedro_motion changed or
	Item motion_sensor_quarto_pedro_illumination changed
then
	logInfo("motion.rules", "movimento/iluminação - quarto do Pedro.");
	
	var turnLightOn = false;
	
	if (motion_sensor_quarto_pedro_illumination.state > 40) {
		turnLightOn = false;
		logInfo("motion.rules", "Quarto do Pedro illumination needs no lights.");
	} else {
		logDebug("motion.rules", "Quarto do Pedro illumination needs lights ON.");
		turnLightOn = shouldLightTurnOn.apply(hue_quarto_pedro_switch, EnableLightOnMotion_QuartoPedro, motion_sensor_quarto_pedro_motion);
	}
	
	logDebug("motion.rules", "turnLightOn " + turnLightOn + ".");
	
	if (turnLightOn)
	{
		logDebug("motion.rules", "sending ON command to Hue - Quarto do Pedro");
		sendCommand(hue_quarto_pedro_switch, ON);
		
		if ((hue_quarto_pedro_brightness.state as DecimalType) < 40)
		{
			hue_quarto_pedro_brightness.sendCommand(40);
		}
	} else {
		logDebug("motion.rules", "Quarto do Pedro light will NOT turn ON.");
	}

	var turnLightOff = shouldLightTurnOff.apply(hue_quarto_pedro_switch, EnableLightOnMotion_QuartoPedro, motion_sensor_quarto_pedro_motion);
	
	if (turnLightOff)
	{
		logDebug("motion.rules", "sending OFF command to Hue - Quarto do Pedro");
		sendCommand(hue_quarto_pedro_switch, OFF);
	}
end


rule "Motion Sensor - Quarto Pequeno"
when
    Item motion_sensor_quarto_pequeno_motion changed or
	Item motion_sensor_quarto_pequeno_illumination changed
then
	logInfo("motion.rules", "movimento/iluminação - quarto pequeno.");
	
	var turnLightOn = shouldLightTurnOn.apply(hue_quarto_pequeno_switch, EnableLightOnMotion_QuartoPequeno, motion_sensor_quarto_pequeno_motion);
	
	if (turnLightOn)
	{
		logDebug("motion.rules", "sending ON command to Hue - Quarto Pequeno");
		sendCommand(hue_quarto_pequeno_switch, ON);
		
		if ((hue_quarto_pequeno_brightness.state as DecimalType) < 100)
		{
			hue_quarto_pequeno_brightness.sendCommand(100);
		}
	} else {
		logDebug("motion.rules", "Quarto Pequeno light will NOT turn ON.");
	}

	var turnLightOff = shouldLightTurnOff.apply(hue_quarto_pequeno_switch, EnableLightOnMotion_QuartoPequeno, motion_sensor_quarto_pequeno_motion);
	
	if (turnLightOff)
	{
		logDebug("motion.rules", "sending OFF command to Hue - Quarto do Pequeno");
		sendCommand(hue_quarto_pequeno_switch, OFF);
	}
end



rule "Motion Sensor - Sala de Estar"
when
    Item motion_sensor_sala_estar_motion changed or
	Item motion_sensor_sala_estar_illumination changed
then
	logInfo("motion.rules", "movimento/iluminação - sala de Estar.");
	
	var turnLightOn = false;
	
	if (motion_sensor_sala_estar_illumination.state > 40) {
		turnLightOn = false;
		logInfo("motion.rules", "Sala de Estar illumination needs no lights.");
	} else {
		turnLightOn = shouldLightTurnOn.apply(hue_sala_estar_switch, EnableLightOnMotion_SalaDeEstar, motion_sensor_sala_estar_motion);
	}
	
	if (turnLightOn)
	{
		logDebug("motion.rules", "sending ON command to Hue - Sala de Estar");
		sendCommand(hue_sala_estar_switch, ON);
		
		if ((hue_sala_estar_brightness.state as DecimalType) < 100)
		{
			hue_sala_estar_brightness.sendCommand(100);
		}
	} else {
		logDebug("motion.rules", "Sala de Estar light will NOT turn ON.");
	}
	
	var turnLightOff = shouldLightTurnOff.apply(hue_sala_estar_switch, EnableLightOnMotion_SalaDeEstar, motion_sensor_sala_estar_motion);

	if (turnLightOff)
	{
		logDebug("motion.rules", "sending OFF command to Hue - Sala de Estar");
		sendCommand(hue_sala_estar_switch, OFF);
	}
end